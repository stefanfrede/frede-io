---
permalink: service-worker.js
eleventyExcludeFromCollections: true
---

const VERSION = '{{ hash }}';

const CACHE_KEYS = {
  PRE_CACHE: `precache-${VERSION}`,
  RUNTIME: `runtime-${VERSION}`,
};

// URLS that we donâ€™t want to end up in the cache
const EXCLUDED_URLS = ['.netlify'];

// URLS that we want to be cached when the worker is installed
const PRE_CACHE_URLS = [
  '/',
  '/404.html',
  '/index.html',
  '/cv_stefan_frede.pdf',
  '/favicon.ico',
  '/fonts/803160/00C797819E44D167B.css',
  '/fonts/803160/04E033BDD02C65FF3.eot',
  '/fonts/803160/10022B1D00C553F9A.css',
  '/fonts/803160/221A671EA4E193359.eot',
  '/fonts/803160/23AD0147D9D79741C.css',
  '/fonts/803160/25955A7D645091DC4.css',
  '/fonts/803160/25A6A067D616E2900.css',
  '/fonts/803160/31B873A284CA9E1E2.css',
  '/fonts/803160/34154EFF2A72A50A0.css',
  '/fonts/803160/358ED5115C53580FB.css',
  '/fonts/803160/35BA0458AD1169214.css',
  '/fonts/803160/44BE527F0B06ADA2F.css',
  '/fonts/803160/4C494DF65EA0FB9D7.css',
  '/fonts/803160/57E11512258A3780E.eot',
  '/fonts/803160/58AEAE2CAAFAC94AA.eot',
  '/fonts/803160/5A2D4DBB231379218.eot',
  '/fonts/803160/6CBF8DFC97F86A4A6.css',
  '/fonts/803160/6FAC97A543B0C38A7.css',
  '/fonts/803160/754DE7BD2C1442805.css',
  '/fonts/803160/75A632CE022EBD99E.css',
  '/fonts/803160/77829E99D79431EAF.css',
  '/fonts/803160/7ACC80756E4AC26AD.css',
  '/fonts/803160/7B25274AACAC3BC80.css',
  '/fonts/803160/7E6FFAFFD87F81149.css',
  '/fonts/803160/7F34DC92ED17B1ADC.css',
  '/fonts/803160/924ACABF73B312B1D.css',
  '/fonts/803160/9B0BB9D6359788826.css',
  '/fonts/803160/9CF327E0E2A1EC94E.css',
  '/fonts/803160/A2A52CED58DA99A23.css',
  '/fonts/803160/A3702A87D62A64742.eot',
  '/fonts/803160/A77D8C7AD26762AE5.css',
  '/fonts/803160/AC9183F4D0360D7AD.css',
  '/fonts/803160/B29B4764D14873E01.css',
  '/fonts/803160/BBC1CA94F16959E4F.css',
  '/fonts/803160/C26CE0E3AC132E946.css',
  '/fonts/803160/C2AE686C7E404319D.css',
  '/fonts/803160/C641CBA9B80F85D31.css',
  '/fonts/803160/C849D421159509768.css',
  '/fonts/803160/D3F9775998B4EC10B.css',
  '/fonts/803160/D6F786E9E58314B03.css',
  '/fonts/803160/E48104BEF37E61E3E.css',
  '/fonts/803160/E63806EA7D73680AC.css',
  '/fonts/803160/EAEFFED913B6B869F.css',
  '/fonts/803160/F40139C1325F541F9.css',
  '/fonts/803160/F63308434890AC6DA.css',
  '/fonts/803160/FD6AC6B1A5B24670E.css',
  '/images/social-share.png',
  '/images/icons/apple-touch-icon.png',
  '/images/icons/favicon-16x16.png',
  '/images/icons/favicon-32x32.png',
  '/images/icons/icon-72x72.png',
  '/images/icons/icon-96x96.png',
  '/images/icons/icon-128x128.png',
  '/images/icons/icon-144x144.png',
  '/images/icons/icon-152x152.png',
  '/images/icons/icon-192x192.png',
  '/images/icons/icon-384x384.png',
  '/images/icons/icon-512x512.png',
  '/images/icons/maskable_icon.png',
  '/styles/index.css',
];

// You might want to bypass a certain host
const IGNORED_HOSTS = ['localhost'];

/**
 * Takes an array of strings and puts them in a named cache store
 *
 * @param {String} cacheName
 * @param {Array} items=[]
 */
const addItemsToCache = function (cacheName, items = []) {
  caches.open(cacheName).then((cache) => cache.addAll(items));
};

self.addEventListener('install', (e) => {
  e.waitUntil(addItemsToCache(CACHE_KEYS.PRE_CACHE, PRE_CACHE_URLS));
});

self.addEventListener('activate', (e) => {
  // Look for any old caches that don't match our set and clear them out
  e.waitUntil(
    caches
      .keys()
      .then((cacheNames) => {
        return cacheNames.filter(
          (item) => !Object.values(CACHE_KEYS).includes(item),
        );
      })
      .then((itemsToDelete) => {
        return Promise.all(
          itemsToDelete.map((item) => {
            return caches.delete(item);
          }),
        );
      })
      .then(() => self.clients.claim()),
  );
});

self.addEventListener('fetch', (e) => {
  const { hostname } = new URL(e.request.url);

  // Check we don't want to ignore this host
  if (IGNORED_HOSTS.indexOf(hostname) >= 0) {
    return;
  }

  // Check we don't want to ignore this URL
  if (EXCLUDED_URLS.some((page) => e.request.url.indexOf(page) > -1)) {
    return;
  }

  e.respondWith(
    caches.match(e.request).then((cachedResponse) => {
      // Item found in cache so return
      if (cachedResponse) {
        return cachedResponse;
      }

      // Nothing found so load up the request from the network
      return caches.open(CACHE_KEYS.RUNTIME).then((cache) => {
        return fetch(e.request)
          .then((response) => {
            // Put the new response in cache and return it
            return cache.put(e.request, response.clone()).then(() => {
              return response;
            });
          })
          .catch(() => {
            return;
          });
      });
    }),
  );
});
